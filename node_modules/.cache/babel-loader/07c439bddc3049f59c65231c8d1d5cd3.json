{"ast":null,"code":"import _objectSpread from\"E:\\\\mongoDb\\\\store\\\\baali-store\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"E:\\\\mongoDb\\\\store\\\\baali-store\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import{ADD_TO_CART,GET_CART_DETAILS,UPDATE_CART,CLEAR_CART}from\"../actions/cartActions\";var initState={cartItem:[],totalAmount:0,cartCount:0};var cartReducers=function cartReducers(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initState;var actions=arguments.length>1?arguments[1]:undefined;switch(actions.type){case ADD_TO_CART:var cartItem=state.cartItem;var updatedCartItem=[];var totalAmount;var itemCount=state.cartItem.filter(function(item){return item.product===actions.cartItem.product;});if(itemCount.length===0){updatedCartItem=[].concat(_toConsumableArray(cartItem),[{product:actions.cartItem.product,name:actions.cartItem.name,image:actions.cartItem.image,price:actions.cartItem.price,quantity:actions.cartItem.quantity,total:actions.cartItem.quantity*actions.cartItem.price}]);}else{updatedCartItem=cartItem.map(function(item){return item.product===actions.cartItem.product?_objectSpread({},item,{quantity:item.quantity+actions.cartItem.quantity,total:item.total+actions.cartItem.price}):item;});}totalAmount=state.totalAmount+actions.cartItem.price;state={cartItem:updatedCartItem,totalAmount:totalAmount,cartCount:state.cartCount+1};break;case GET_CART_DETAILS:var cItem=actions.cartItems.cart;var totalAmt=0;var quantityCount=0;var updateCartItem=cItem.map(function(item){totalAmt+=item.total;quantityCount+=item.quantity;return{product:item.product._id,name:item.product.name,image:item.product.productPic[0].img,price:item.price,quantity:item.quantity,total:item.total};});state={cartItem:updateCartItem,totalAmount:totalAmt,cartCount:quantityCount};break;case UPDATE_CART:var updateItem=actions.item;var cartItems=state.cartItem.map(function(item){return item.product===updateItem.productId?_objectSpread({},item,{quantity:updateItem.quantity,total:updateItem.total}):item;});state={cartItem:cartItems,totalAmount:parseFloat(state.totalAmount)+parseFloat(updateItem.price*updateItem.newQuantity),cartCount:parseInt(state.cartCount)+parseInt(updateItem.newQuantity)};break;case CLEAR_CART:state={cartItem:[],totalAmount:0,cartCount:0};break;default:break;}return state;};export default cartReducers;","map":{"version":3,"sources":["E:/mongoDb/store/baali-store/client/src/store/reducers/cartReducers.js"],"names":["ADD_TO_CART","GET_CART_DETAILS","UPDATE_CART","CLEAR_CART","initState","cartItem","totalAmount","cartCount","cartReducers","state","actions","type","updatedCartItem","itemCount","filter","item","product","length","name","image","price","quantity","total","map","cItem","cartItems","cart","totalAmt","quantityCount","updateCartItem","_id","productPic","img","updateItem","productId","parseFloat","newQuantity","parseInt"],"mappings":"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","sourcesContent":["import { ADD_TO_CART, GET_CART_DETAILS, UPDATE_CART, CLEAR_CART } from \"../actions/cartActions\"\r\n\r\nconst initState = {\r\n    cartItem: [],\r\n    totalAmount: 0,\r\n    cartCount: 0\r\n}\r\n\r\nconst cartReducers = (state = initState, actions) => {\r\n    switch(actions.type){\r\n        case ADD_TO_CART:\r\n            const cartItem = state.cartItem;\r\n            let updatedCartItem = [];\r\n            let totalAmount;\r\n\r\n            const itemCount = state.cartItem.filter(item => item.product === actions.cartItem.product);\r\n\r\n            if(itemCount.length === 0){\r\n                updatedCartItem = [\r\n                    ...cartItem,\r\n                    {\r\n                        product: actions.cartItem.product,\r\n                        name: actions.cartItem.name,\r\n                        image: actions.cartItem.image,\r\n                        price: actions.cartItem.price,\r\n                        quantity: actions.cartItem.quantity,\r\n                        total: actions.cartItem.quantity * actions.cartItem.price\r\n                    }\r\n                ];\r\n            }else{\r\n                updatedCartItem = cartItem.map(item => \r\n                    item.product === actions.cartItem.product ?\r\n                    {\r\n                        ...item,\r\n                        quantity: item.quantity + actions.cartItem.quantity,\r\n                        total: item.total + actions.cartItem.price\r\n                    } : item\r\n                    )\r\n            }\r\n            totalAmount = state.totalAmount + actions.cartItem.price\r\n            state = {\r\n                cartItem: updatedCartItem,\r\n                totalAmount: totalAmount,\r\n                cartCount: state.cartCount + 1\r\n            }\r\n            break;\r\n        case GET_CART_DETAILS:\r\n            const cItem = actions.cartItems.cart;\r\n            let totalAmt = 0;\r\n            let quantityCount = 0;\r\n            const updateCartItem = cItem.map(item => {\r\n                totalAmt += item.total;\r\n                quantityCount += item.quantity;\r\n                return {\r\n                    product: item.product._id,\r\n                    name: item.product.name,\r\n                    image: item.product.productPic[0].img,\r\n                    price: item.price,\r\n                    quantity: item.quantity,\r\n                    total: item.total\r\n                }\r\n            })\r\n            state = {\r\n                cartItem: updateCartItem,\r\n                totalAmount: totalAmt,\r\n                cartCount: quantityCount\r\n            }\r\n            break;\r\n        case UPDATE_CART:\r\n            const updateItem = actions.item;\r\n            const cartItems = state.cartItem.map(item => {\r\n                return item.product === updateItem.productId ? \r\n                {\r\n                    ...item,\r\n                    quantity: updateItem.quantity,\r\n                    total: updateItem.total\r\n                } : item\r\n            });\r\n            state = {\r\n                cartItem: cartItems,\r\n                totalAmount: parseFloat(state.totalAmount) + parseFloat(updateItem.price * updateItem.newQuantity),\r\n                cartCount: parseInt(state.cartCount) + parseInt(updateItem.newQuantity)\r\n            }\r\n            break;\r\n        case CLEAR_CART:\r\n            state = {\r\n                cartItem: [],\r\n                totalAmount: 0,\r\n                cartCount: 0\r\n            }\r\n            break;\r\n        default:\r\n        break;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default cartReducers;"]},"metadata":{},"sourceType":"module"}